name: 'Terraform CI'
on:
  workflow_call:
    secrets:
      PROJECT:
        required: true
      REGION:
        required: true
      DOCKER_REPO_PROJECT:
        required: true
      DOCKER_REPO:
        required: true
      DOCKER_REPO_REGION:
        required: true
      TERRAFORM_STATE_BUCKET:
        required: true
      WORKLOAD_IDP:
        required: true
      SERVICE_ACCOUNT:
        required: true

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.9
    - uses: 'google-github-actions/auth@v0'
      id: 'auth'
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDP }} 
        service_account: ${{ secrets.SERVICE_ACCOUNT }}
    - name: Generate Terraform backend information
      id: state_generation
      run: |
        cat > terraform/main-state.tf << EOF
        terraform {
          backend "gcs" {
            bucket = "${{ secrets.TERRAFORM_STATE_BUCKET }}"
            prefix = "terraform/state"
          }
        }
        EOF
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir=terraform init
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform -chdir=terraform fmt -check
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        terraform -chdir=terraform plan \
          -var 'project_id=${{ secrets.PROJECT }}' \
          -var 'region=${{ secrets.REGION }}' \
          -var 'docker_repo_name=${{ secrets.DOCKER_REPO }}' \
          -var 'docker_repo_region=${{ secrets.DOCKER_REPO_REGION }}' \
          -var 'docker_repo_project_id=${{ secrets.PROJECT }}'
    # On push to main, build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   if: github.event_name == 'push'
    #   run: |
    #     terraform -chdir=terraform apply -auto-approve \
    #       -var 'project_id=${{ secrets.PROJECT }}' \
    #       -var 'region=${{ secrets.REGION }}' \
    #       -var 'docker_repo_name=${{ secrets.DOCKER_REPO }}' \
    #       -var 'docker_repo_region=${{ secrets.DOCKER_REPO_REGION }}' \
    #       -var 'docker_repo_project_id=${{ secrets.PROJECT }}'
