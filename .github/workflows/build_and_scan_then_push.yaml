name: Build and scan container image (then push)
on:
  workflow_call:
    inputs:
      # must be a list of directories and service names, like '[ { "directory": "dir1", "name": "service1"} ]'
      services:
        required: true
        type: string
      push:
        required: true
        type: string
    secrets:
      DOCKER_REPO_PROJECT:
        required: true
      DOCKER_REPO:
        required: true
      DOCKER_REPO_REGION:
        required: true
      WORKLOAD_IDP:
        required: false
      SERVICE_ACCOUNT:
        required: false

jobs:
  build_scan_push:
    name: Build and scan a Docker image, then push it
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    strategy:
      fail-fast: false
      matrix: 
        service: ${{ fromJson(inputs.services) }}
    steps:
      - run: echo Working on ${{ matrix.service.directory }} directory, for ${{ matrix.service.name }} service
      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get required commit
        id: find_commit
        env:
          NAME: ${{ matrix.service.name }}
        run: |
          line=`cat terraform/image-versions.auto.tfvars | grep $NAME`
          line=${line//\"}
          service=${line%_tag*}
          tag=${line##* }
          echo ${tag}
          echo ::set-output name=commit::`echo $tag`
      - name: Checkout
        run: git checkout ${{ steps.find_commit.output.commit }}
      - name: Build image
        env:
          DIRECTORY: ${{ matrix.service.directory }}
          NAME: ${{ matrix.service.name }}
        run: |-
          docker build \
            -t ${{ secrets.DOCKER_REPO_REGION }}-docker.pkg.dev/${{ secrets.DOCKER_REPO_PROJECT }}/${{ secrets.DOCKER_REPO }}/$NAME:latest \
            -t ${{ secrets.DOCKER_REPO_REGION }}-docker.pkg.dev/${{ secrets.DOCKER_REPO_PROJECT }}/${{ secrets.DOCKER_REPO }}/$NAME:${{ steps.find_commit.output.commit }} \
            $GITHUB_WORKSPACE/$DIRECTORY
      - name: Scan image for good practices
        id: scan_dockle
        env:
          NAME: ${{ matrix.service.name }}
        run: |
          VERSION=$(
            curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
            grep '"tag_name":' | \
            sed -E 's/.*"v([^"]+)".*/\1/' \
          ) && docker run --rm -v /var/run/docker.sock:/var/run/docker.sock goodwithtech/dockle:v${VERSION} -f sarif \
              ${{ secrets.DOCKER_REPO_REGION }}-docker.pkg.dev/${{ secrets.DOCKER_REPO_PROJECT }}/${{ secrets.DOCKER_REPO }}/$NAME:${{ steps.find_commit.output.commit }}
      - name: Scan image for vulnerabilities
        id: scan
        uses: aquasecurity/trivy-action@4b9b6fb4ef28b31450391a93ade098bb00de584e
        with:
          scan-type: 'image'
          image-ref: '${{ secrets.DOCKER_REPO_REGION }}-docker.pkg.dev/${{ secrets.DOCKER_REPO_PROJECT }}/${{ secrets.DOCKER_REPO }}/${{ matrix.service.name }}:${{ steps.find_commit.output.commit }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          security-checks: 'vuln,config'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
      - uses: 'google-github-actions/auth@v0'
        id: 'auth'
        if: ${{ inputs.push == 'true' }}
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDP }} 
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
      - name: 'Set up Cloud SDK'
        if: ${{ inputs.push == 'true' }}
        id: 'cloud_setup'
        uses: 'google-github-actions/setup-gcloud@v0'
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Configure docker to use gcloud
        if: ${{ inputs.push == 'true' }}
        id: 'docker_cloud_setup'
        run: |
          gcloud auth configure-docker ${{ secrets.DOCKER_REPO_REGION }}-docker.pkg.dev
      # Push image to Google Container Registry
      - name: Push
        if: ${{ inputs.push == 'true' }}
        env:
          NAME: ${{ matrix.service.name }}
        run: |-
          docker push ${{ secrets.DOCKER_REPO_REGION }}-docker.pkg.dev/${{ secrets.DOCKER_REPO_PROJECT }}/${{ secrets.DOCKER_REPO }}/$NAME --all-tags
